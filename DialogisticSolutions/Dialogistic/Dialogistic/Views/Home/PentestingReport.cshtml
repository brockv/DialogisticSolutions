
@{
    Layout = "~/Views/Shared/_Layout.cshtml";

}

<section class="content-header">
    <h2>
        Pentesting Report
    </h2>
    <ol class="breadcrumb">
        <li><a href="~/Admins/Dashboard"><i class="fa fa-dashboard"></i>Dashboard</a></li>
        <li class="active">Pentesting Report</li>
    </ol>
</section>
<!-- Main content -->
<section class="the-content">
    <div class="row">
        <div class="col-md-12">
            <h2>Overview</h2>
            <p>
                I submitted a request to run a penetration test on our Dialogsitcs web application, and after providing my subscriber ID, I received confirmation
                from Microsoft to being the penetration tests. This is a two-week testing run. As the Subscriber ID is unique to myself, I cannot share it here.
            </p>
            <br />
            <h3>Summary of Results</h3>
            <p>
                <ul>Azure Testing: Passed</ul>
                <ul>Twilio Testing: Passed</ul>
                <ul>Amazon Testing: Passed</ul>
                <ul>Stripe Testing: Passed</ul>
                <ul>CometChat Testing: Passed</ul>
                <ul>SendGrid Testing: Passed</ul>
            </p>
            <br />
            <h3>Azure</h3>
            <p>
                When testing Azure applications, obtaining credentials directly from a user's operating system is one of the most common methods. To test this, I used <i>Mimikatz</i>, which 
                I downloaded from GitHub. As it was initially flagged by antivirus protection, I converted it to a PowerShell script as part of the PowerSploit framework. It attempts 
                to capture credentials by debugging rights. It uses this privilege to read memory in LSASS. Running <code>privilege::debug</code>, along with other methods like 
                <code>sekurlsa::logonpasswords</code> to dump all passwords and hashes. Finding no success on my personal machine, thiw would need to run on all developer machines, 
                checking for saved or hashed passwords. One of the best ways to protect against something like Mimikatz is to use <i>Credential Guard</i>. It allows protection from 
                frameworks hijacking credentials.
            </p>
            <p>
                Another common flaw in Azure applications is having unencrypted credentials in the form of connection strings for Azure SQL databases, which can include, but is not limited to 
                usernames and passwords in plaintext. The next most common are access keys used to interact with Azure Storage accounts since applications often need to read or write data to storage. 
                As this application does not use blobs, they did not need to be tested for this application; however, if blobs are used in the future, testing against their vulnerabilities is 
                recommended.
            </p>
            <p>
                No virtual machines were used during production, so no virtual machines required testing.
            </p>
            <br />
            <h3>Twilio</h3>
            <p>
                Twilio's API is very secure; however, for our customers, they will need to supply their own Twilio keys and values, along with their own Twilio
                phone number. It needs to be certain that no numbers are hard-coded into the program once development is complete. All keys appear to be hidden
                from the end-user view.
            </p>
            <br />
            <h3>Amazon</h3>
            <p>
                Amazon, although many CVEs are found, is very secure. I tested our program to see if any of the API keys were left on the pages. None were discoved.
            </p>
            <br />
            <h3>Stripe</h3>
            <p>
                Stripe versions v1, v2, and v3 were all tested. This was done by modifying URL links as well as attempting brute-force attacks on login credentials.
                Stripe v2 & v3 passed all tests. Stripe v1 was found to have a vulnerability in their URL. remote attackers to bypass intended access restrictions by
                replaying api.stripe.com /v1/tokens XMLHttpRequest data, parsing the response under the object card{}, and reading the cvc_check information if the
                creation is successful without charging the actual card used in the transaction. It could allow direct URL modification or modification of the localhsot.
                This issue was reported to Stripe as a CVE, and I am awaiting further response. <i>A current Stripe API key was visible within the code, and it was  
                removed from this code.</i>
            </p>
            <br />
            <h3>CometChat</h3>
            <p>
                There is very limited use of CometChat, but since it is used across both standard users and administrators, it needed to be verified that none of the
                keys are existent. None were found in testing. App has been parsed with a Python script to check for specific key/value pairs or keywords. None were
                found in relation to CometChat.
            </p>
            <br />
            <h3>SendGrid</h3>
            <p>
                For a brief overview, SendGrid is used to send emails, which we used for adding standard users (callers) to the team. SendGrid is an extremely secure
                program, and no public vulnerabilities have been discovered within the program. I was unable to find any vulnerabilities within the SendGrid API
                as well.
            </p>
            <br />
            <h3>Conclusion</h3>
            <p>
                Dialogisitcs currently passees penetration testing, with the single exception of version 1 of Stripe failing. This program is using Stripe v3 and is secure. 
                The utilization of <i>2-Factor Authentication</i> is highly recommended for users to login. This can be done alongside using CAPTCHA.
            </p>
            <p>
                <i>-Stuart Ashenbrenner, Dialogistics Developer</i>
            </p>
        </div>
    </div>
</section>

